- name: disable default nodejs
  ansible.builtin.command: "dnf module disable nodejs -y"

- name: enable nodejs:20
  ansible.builtin.command: "dnf module enable nodejs:20 -y"

- name: install nodejs and mysql
  ansible.builtin.dnf:
    name : "{{ item }}"
    state: installed
  loop:
    - nodejs
    - mysql-server

- name: create expense user
  ansible.builtin.user:
    name: expense

- name: create app directory
  ansible.builtin.file:
    path: /app
    state: directory

- name: download backend code
  ansible.builtin.get_url:
    url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
    dest: /tmp/backend.zip

- name: unzip the code
  ansible.builtin.unarchive:
    src: /tmp/backend.zip     #checks bydefault in ansible server
    remote_src: yes
    dest: /app

- name: install npm dependencies
  ansible.builtin.command: "npm install"
  args:
    chdir: /app 

- name: copy backend service   # copies backend service from ansible server to target server
  ansible.builtin.template:
    src: backend.service.j2
    dest: /etc/systemd/system/backend.service

- name: install python mysql dependencies
  ansible.builtin.pip: 
    name:
    - PyMySQL # to connect MySQL DB from Ansible
    - cryptography
    executable: pip3.9

- name: import data into mysql
  community.mysql.mysql_db:
    login_user: "{{ login_user }}"
    login_password: "{{ login_password }}"
    login_host: "{{ login_host }}"
    target: /app/schema/backend.sql
    state: import # dump or import
    name: all 

- name: daemon reload
  ansible.builtin.systemd_service:
    daemon_reload: true 

- name: start and enable backend service
  ansible.builtin.service:
    name: backend
    state: reloaded
    enabled: yes  